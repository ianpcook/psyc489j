install.packages("ISwR")
library(rstan)
library(ISwR)
data(juul)
juul <- juul[complete.cases(juul$sex, juul$igf1),]
source("~/Dropbox/psyc489j_2015/code/stan_lm.R")
print(summary(fit, probs = c(.025, .975))$summary, digits = 2)
lm(igf1 ~ sex, data = juul)
install.packages("arm")
stanLM
?stan
source("~/Dropbox/psyc489j_2015/code/stan_lm.R")
fit <- stanLM(igf1 ~ sex, data = juul, refresh = -1)
fit <- stanLM(igf1 ~ sex, data = juul, refresh = -1)
install.packages("arm")
?model.matrix
<pre><code style="font-size:18pt">
install.packages("LearnBayes")
library(LearnBayes)
data(studentdata)
summary(studentdata)
?studentdata
data()
data(iris)
summary(iris)
?iris
data(PlantGrowth)
summary(PlantGrowth)
data(cars)
summary(cars)
summary(mtcars)
dim(mtcars)
cor(mtcars)
data(InsectSprays)
summary(InsectSprays)
?cars
library(ggplot2)
qplot(speed, distance, data = cars)
qplot(speed, dist, data = cars)
library(ISwR)
data(juul)
summary(juul)
data(warpbreaks)
summary(warpbreaks)
data(trees)
summary9trees
summary(trees)
data(sleep)
pool <- lm(extra ~ 1, data = sleep)
no.pool <- lm(extra ~ ID, data = sleep)
library(lme4)
part.pool <- lmer(extra ~ 1 + (1|ID), data = sleep)
library(arm)
display(no.pool)
display(part.pool)
summmary(extr)
summmary(extra)
summary(extra)
summary(sleep)
data(flights)
dataa(dplyr::flights)
data(dplyr::flights)
data()
data(sleepstudy)
summary(sleepstudy)
head(sleepstudy)
library(lme4)
summary(lmer(log(Reaction) ~ Days + (1|Subject) + (1|Days), data = sleepstudy))
summary(lmer(log(Reaction) ~ Days + (1|Subject), data = sleepstudy))
summary(sleepstudy)
summary(juul)
library(ISwR)
data(juul)
summary(juul)
summary(lm(igf1 ~ age * sex * tanner, data = juul))
summary(lm(log(igf1) ~ age * sex * tanner, data = juul))
juul$post <- ifelse(juul$tanner > 1, 1, 0)
summary(lm(log(igf1) ~ age * sex * post, data = juul))
library(ggplot2)
ggplot(juul, aes(age, igf1, color = post)) +
geom_point(alpha = .2) +
geom_smooth(method = "lm") +
facet_wrap(~sex) +
theme_bw()
juul$post <- factor(ifelse(juul$tanner > 1, 1, 0), labels = c("pre", "post"))
summary(lm(log(igf1) ~ age * sex * post, data = juul))
library(ggplot2)
ggplot(juul, aes(age, igf1, color = post)) +
geom_point(alpha = .2) +
geom_smooth(method = "lm") +
facet_wrap(~sex) +
theme_bw()
?juul
summary(lm(log(igf1) ~ age * sex * tanner, data = juul))
summary(lm(log(igf1) ~ age * sex * as.factor(tanner), data = juul))
summary(lm(log(igf1) ~ age * sex * tanner, data = juul))
ggplot(juul, aes(age, igf1, color = tanner)) +
geom_point(alpha = .2) +
geom_smooth(method = "lm") +
facet_wrap(~sex) +
theme_bw()
ggplot(juul, aes(age, igf1, color = as.factor(tanner))) +
geom_point(alpha = .2) +
geom_smooth(method = "lm") +
facet_wrap(~sex) +
theme_bw()
juul <- juul[complete.cases(juul$sex, juul$tanner)]
data(juul)
juul <- juul[complete.cases(juul$sex, juul$tanner),]
juul$sex <- factor(juul$sex, labels = c("male", "female"))
summary(lm(log(igf1) ~ age * sex * tanner, data = juul))
library(ggplot2)
ggplot(juul, aes(age, igf1, color = as.factor(tanner))) +
geom_point(alpha = .2) +
geom_smooth(method = "lm") +
facet_wrap(~sex) +
theme_bw()
```
ggplot(juul, aes(age, igf1, color = as.factor(tanner))) +
geom_point(alpha = .2) +
geom_smooth(method = "lm") +
facet_wrap(~sex) +
theme_bw() +
scale_y_log10()
summary(lm(log(igf1) ~ age * sex * tanner, data = juul))
library(arm)
mod1 <- lm(log(igf1) ~ age * sex * tanner, data = juul)
print(exp(coef(mod1)), digits = 3)
print(exp(coef(mod1)[1]
)
)
mod1
summary(mod1)
display(mod1)
mod2 <- lm(log(price) ~ log(carat) * cut, data = diamonds)
display(mod2)
display(mod2, digits = 3)
mod2 <- lm(log(price) ~ carat * log(carat) * cut, data = diamonds)
display(mod2, digits = 3)
mod2 <- lm(log(price) ~ log(carat) * cut, data = diamonds)
display(mod2, digits = 3)
mod2 <- lm(log(price) ~ carat + log(carat) * cut, data = diamonds)
display(mod2, digits = 3)
mod2 <- lm(log(price) ~ log(carat) * cut, data = diamonds)
display(mod2, digits = 3)
ggplot(diamonds, aes(carat, price, color = cut)) +
geom_point(alpha = .05) +
geom_smooth(method = "lm", se = FALSE) +
scale_y_log10() +
scale_x_log10() +
theme_bw()
dat <- juul[complete.cases(juul$age, juul$igf1, juul$sex),]
x <- model.matrix(~ age * sex, data = dat)
?stan
library(rstan)
?stan
dat <- juul[complete.cases(juul$age, juul$igf1, juul$sex),]
x <- model.matrix(~ age * sex, data = dat)
sdat <- list(
y = dat$igf1,
x = x,
N = rnow(x),
K = ncol(x)
)
smod <- "
data{
int N;
int K;
vector[N] y;
matrix[N,K] x;
}
parameters {
vector[K] beta;
real<lower=0> sigma;
}
transformed parameters {
vector[N] yhat;
for (n in 1:N)
yhat[n] <- x * beta;
}
model {
y ~ normal(yhat, sigma);
}
"
sfit <- stan(model_code = smod, data = sdat, refresh = -1)
smod <- "
data{
int N;
int K;
vector[N] y;
matrix[N,K] x;
}
parameters {
vector[K] beta;
real<lower=0> sigma;
}
transformed parameters {
vector[N] yhat;
for (n in 1:N)
yhat[n] <- x[n,] * beta;
}
model {
y ~ normal(yhat, sigma);
}
"
sfit <- stan(model_code = smod, data = sdat, refresh = -1)
smod <- "
data{
int N;
int K;
vector[N] y;
matrix[N,K] x;
}
parameters {
vector[K] beta;
real<lower=0> sigma;
}
transformed parameters {
vector[N] yhat;
for (n in 1:N)
yhat[n] <- x[n,1:K] * beta;
}
model {
y ~ normal(yhat, sigma);
}
"
sfit <- stan(model_code = smod, data = sdat, refresh = -1)
smod <- "
data{
int N;
int K;
vector[N] y;
matrix[N,K] x;
}
parameters {
vector[K] beta;
real<lower=0> sigma;
}
transformed parameters {
vector[N] yhat;
for (n in 1:N)
yhat[n] <- x[n, 1:K] * beta;
}
model {
y ~ normal(yhat, sigma);
}
"
sfit <- stan(model_code = smod, data = sdat, refresh = -1)
smod <- "
data{
int N;
int K;
vector[N] y;
row_vector[N] x[K];
}
parameters {
vector[K] beta;
real<lower=0> sigma;
}
transformed parameters {
vector[N] yhat;
for (n in 1:N)
yhat[n] <- x[n] * beta;
}
model {
y ~ normal(yhat, sigma);
}
"
sfit <- stan(model_code = smod, data = sdat, refresh = -1)
sdat <- list(
y = dat$igf1,
x = x,
N = rnow(x),
K = ncol(x)
)
sdat <- list(
y = dat$igf1,
x = x,
N = nrow(x),
K = ncol(x)
)
sfit <- stan(model_code = smod, data = sdat, refresh = -1)
smod <- "
data{
int N;
int K;
vector[N] y;
row_vector[K] x[N];
}
parameters {
vector[K] beta;
real<lower=0> sigma;
}
transformed parameters {
vector[N] yhat;
for (n in 1:N)
yhat[n] <- x[n] * beta;
}
model {
y ~ normal(yhat, sigma);
}
"
sfit <- stan(model_code = smod, data = sdat, refresh = -1)
sfit
library(reshape2)
print(sfit, pars = c("beta", "sigma"))
summary(dat)
dat <- juul[complete.cases(juul$age, juul$igf1, juul$sex),]
summary(dat)
qplot(age, igf1, data = dat, geom = c("point", "smooth"), method = "lm") + faet_wrap(~sex)
qplot(age, igf1, data = dat, geom = c("point", "smooth"), method = "lm") + facet_wrap(~sex)
print(sfit, pars = c("beta", "sigma"))
temp <- melt(extract(sfit))
summary(temop)
summary(temop)
summary(temp)
head(temp)
head(melt(as.array(sfit)))
temp <- temp[grep("yhat", temp$parameters),]
summary(temp)
temp <- melt(as.array(sfit))
summary(tempo)
summary(temp)
temp <- temp[grep("yhat", as.character(temp$parameters)),]
summary(temp)
qplot(value, data = temp, geom = "density")
qplot(igf1, data = dat, geom = "density")
print(sfit, pars = c("beta", "sigma"))
summary(x)
temp <- melt(as.array(sfit))
temp <- temp[grep("yhat", as.character(temp$parameters)),]
ggplot(dat, aes(igf1)) +
geom_density() +
geom_density(data = temp, aes(value), color = "firebrick")
rm(list = ls())
n <- 10
sdat <- as.list(as.data.frame(mvrnorm(n = n, mu = c(10, 0), Sigma = matrix(c(1, .5, .5, 1), ncol = 2))))
sdat$N <- n
sdat$intercept <- rep(1, n)
names(sdat)[1:2] <- c("y", "x")
smod <- "
data {
int N;
vector[N] y;
vector[N] x;
vector[N] intercept;
}
parameters {
real alpha;
real beta;
real<lower=0> sigma;
}
transformed parameters {
vector[N] yhat;
yhat <- alpha * intercept + beta * x;
}
model {
y ~ normal(yhat, sigma);
}
"
sfit <- stan(model_code = smod, data = sdat, refresh = -1, chains = 1, iter = 200)
sfit
sdat
print(sfit, digits = 2, probs = c(.1, .5, .9))
str(sfit)
str(as.array(sfit))
x <- melt(extract(sfit, inc_warmup = TRUE, permuted = FALSE))
x$period <- factor(ifelse(x$iterations > 100, "post", "burn"))
x <- drop.levels(x[grep("sigma", x$parameters), ])
ac <- melt(lapply(levels(x$parameters), function(par) lapply(levels(x$period), function(per) acf(x$value[x$parameters == par & x$period == per], plot = FALSE)$acf)))
names(ac)[c(1, 5:6)] <- c("lag", "period", "parameters")
ac$period <- factor(ac$period, labels = c("burn", "post"))
ac$parameters <- factor(ac$parameters, labels = levels(x$parameters))
ggplot(ac, aes(lag, value)) +
geom_point() +
geom_segment(aes(x = lag, xend = lag, y = 0, yend = value)) +
facet_grid(period ~ parameters) +
theme_bw(base_size = 24)
require(knitr)
require(ggplot2)
library(arm)
library(dplyr)
library(rstan)
library(MASS)
library(reshape2)
library(gdata)
summary(x)
x <- drop.levels(x[grep("sigma", x$parameters), ])
ac <- melt(lapply(levels(x$parameters), function(par) lapply(levels(x$period), function(per) acf(x$value[x$parameters == par & x$period == per], plot = FALSE)$acf)))
names(ac)[c(1, 5:6)] <- c("lag", "period", "parameters")
ac$period <- factor(ac$period, labels = c("burn", "post"))
ac$parameters <- factor(ac$parameters, labels = levels(x$parameters))
ggplot(ac, aes(lag, value)) +
geom_point() +
geom_segment(aes(x = lag, xend = lag, y = 0, yend = value)) +
facet_grid(period ~ parameters) +
theme_bw(base_size = 24)
plot(sfit)
sdat
temp <- melt(as.array(sfit))
summary(temp)
temp <- temp[grep("yhat", temp$parameters),]
summary(temp)
y <- data.frame(y = sdat$y)
temp <- melt(as.array(sfit))
temp <- temp[grep("yhat", temp$parameters),]
y <- data.frame(y = sdat$y)
ggplot(temp, aes(value)) +
geom_density() +
geom_density(data = y, aes(y), color = "firebrick")
hist(y$y)
qplot(y, data = y)
temp <- melt(as.array(sfit))
temp <- temp[grep("yhat", temp$parameters),]
y <- data.frame(y = sdat$y)
ggplot(temp, aes(value)) +
geom_density() +
geom_density(data = y, aes(y), color = "firebrick")
?sample
post.sims <- data.frame(y = sample(temp$value, length(sdat$y), replace = TRUE), group = "sim")
post.sims <- rbind(post.sims, tmp)
tmp <- data.frame(y = sdat$y, group = "obs")
post.sims <- rbind(post.sims, tmp)
tmp <- replicate(11, sample(temp$value, length(sdat$y), replace = TRUE))
str(tmp)
post.sims <- data.frame(y = tmp, group = "sim")
tmp <- data.frame(y = sdat$y, group = "obs")
post.sims <- rbind(post.sims, tmp)
tmp <- data.frame(y = sdat$y, group = "obs")
str(post.sims)
tmp <- replicate(11, sample(temp$value, length(sdat$y), replace = TRUE))
str(tmp)
tmp <- melt(replicate(11, sample(temp$value, length(sdat$y), replace = TRUE)))
post.sims <- data.frame(y = tmp, group = "sim")
summary(tmp)
tmp <- data.frame(Var1 = 1:10, Var2 = "obs", value = sdat$y, group = "obs")
post.sims <- rbind(post.sims, tmp)
post.sims <- melt(replicate(11, sample(temp$value, length(sdat$y), replace = TRUE)))
post.sims$group <- "sim"
tmp <- data.frame(Var1 = 1:10, Var2 = "obs", value = sdat$y, group = "obs")
post.sims <- rbind(post.sims, tmp)
summary(post.sims)
ggplot(post.sims, aes(value)) +
geom_histogram(aes(fill = group)) +
facet_wrap(~Var2)
warnings()
ggplot(post.sims, aes(value)) +
geom_histogram(aes(fill = group)) +
facet_wrap(~Var2) +
theme_bw()
traceplot(sfit)
?traceplot
traceplot(sfit, pars = c("alpha", "beta", "sigma"))
rm(list = ls())
data()
library(lme4)
data()
summary(Penicillin)
?Penicillin
summary(lmer(diameter ~ sample + (1|plate), data = Penicillin))
summary(lm(diameter ~ sample, data = Penicillin))
install.packages("gridExtra")
load("~/Dropbox/mathALLthebio/neurons.RData")
qplot(value, data = melt(cells[!names(cells) %in% c("cell", "tree.count")])) + facet_wrap(~variable, scales = "free")
temp <- melt(cells[!names(cells) %in% c("cell", "tree.count", "neuron", "stain")], id.vars = "location")
qplot(location, value, data = temp, geom = "boxplot") + facet_wrap(~variable, scales = "free_y")
ggplot(loc.box, aes(location, value)) + geom_boxplot() + facet_wrap(~variable, scales = "free_y") + facet_wrap(~variable, scales = "free_y") + theme_classic()
loc.box <- melt(cell.agg[!names(cell.agg) %in% c("neuron", "stain")], id.vars = "location")
ggplot(loc.box, aes(location, value)) + geom_boxplot() + facet_wrap(~variable, scales = "free_y") + facet_wrap(~variable, scales = "free_y") + theme_classic()
install.packages("ellipse")
??arrow
install.packages("tikzDevice")
install.packages("grid")
install.packages("grid")
install.packages("grid")
install.packages("grid")
install.packages("proto")
library(rstan)
library(ggplot2)
library(arm)
library(lme4)
data(VerbAgg)
summary(VerbAgg)
ggplot(VerbAgg,aes(r2,(Anger))) + geom_jitter()
data.mlm<-(glmer(r2~anger)+(1|id)+(1|item) data=VerbAgg,family=binomial)
data.mlm<-(glmer(r2~anger+(1|id)+(1|item) data=VerbAgg,family=binomial)
data.mlm<-(glmer(r2~anger+(1|id)+(1|item), data=VerbAgg,family=binomial)
data.mlm<-(glmer(r2~anger+(1|id)+(1|item), data=VerbAgg,family=binomial))
library(ggplot2)
library(rstan)
library(arm)
library(lme4)
data(VerbAgg)
dat<- VerbAgg
dat$r2.num<- as.numeric(dat$r2)
lme1<- glmer(r2 ~ Gender+ Anger + (1|id) +(1|item),data = dat, family=binomial)
display(lme1)
dat <- dat
x <- model.matrix(~ Gender + Anger, data = dat)
sdat <- list(
y = dat$r2,
x = x,
N = nrow(x),
J = length(levels(dat$id)),
subj = unclass(dat$id)
)
data(diamons)
data(diamonds)
summary(diamonds)
library(knitr)
setwd("~/Dropbox/psyc489j_2015/slides")
purl("Lecture13.Rpres")
